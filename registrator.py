import logging
import os
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
)
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ trafee.env
load_dotenv(dotenv_path=Path('.') / 'trafee.env')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ trafee.env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN_REGISTRATOR")

if not TELEGRAM_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN_REGISTRATOR –∑–∞–¥–∞–Ω–∞ –≤ —Ñ–∞–π–ª–µ trafee.env.")

# –ü—É—Ç—å –∫ —Ç–∞–±–ª–∏—Ü–µ
allowed_users_file = "user_list.xlsx"  # Excel-—Ñ–∞–π–ª —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
registration_log_file = "registration_log.csv"  # CSV-—Ñ–∞–π–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
main_bot_link = "https://t.me/trafee_quiz_bot"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_TRAFFEE_USERNAME = range(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
def is_user_in_list(username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ user_list.xlsx –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω"""
    if not os.path.exists(allowed_users_file):
        logging.error(f"–§–∞–π–ª {allowed_users_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return False, False

    try:
        df = pd.read_excel(allowed_users_file)
        if "username" not in df.columns:
            logging.error("–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'username'.")
            return False, False

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        username_cleaned = username.strip().lower()
        user_list = df["username"].dropna().astype(str).str.strip().str.lower().tolist()

        if username_cleaned in user_list:
            wb = load_workbook(allowed_users_file)
            ws = wb.active

            for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
                cell_value = str(row[0].value).strip().lower()
                if cell_value == username_cleaned:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
                    if row[0].fill.start_color.index == "00FF00":
                        return True, True  # –ù–∞–π–¥–µ–Ω –∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    return True, False  # –ù–∞–π–¥–µ–Ω, –Ω–æ –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

        return False, False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False, False

# –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–µ–ª—ë–Ω—ã–º —Ü–≤–µ—Ç–æ–º
def mark_user_as_registered(username):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–µ–ª—ë–Ω—ã–º —Ü–≤–µ—Ç–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ user_list.xlsx"""
    if not os.path.exists(allowed_users_file):
        logging.error(f"–§–∞–π–ª {allowed_users_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    try:
        wb = load_workbook(allowed_users_file)
        ws = wb.active

        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º username
        username_cleaned = username.strip().lower()
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
            cell_value = str(row[0].value).strip().lower()
            if cell_value == username_cleaned:
                green_fill = PatternFill(start_color="00FF00", end_color="00FF00", fill_type="solid")
                for cell in row:
                    cell.fill = green_fill
                wb.save(allowed_users_file)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∑–µ–ª—ë–Ω—ã–º.")
                return

        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ CSV
def log_registration(username, telegram_username):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ CSV-—Ñ–∞–π–ª"""
    data = {
        "Trafee Username": username,
        "Telegram Username": telegram_username,
        "Registration Date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    }
    file_exists = os.path.exists(registration_log_file)

    try:
        with open(registration_log_file, mode="a", encoding="utf-8") as file:
            if not file_exists:
                file.write("Trafee Username,Telegram Username,Registration Date\n")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            file.write(f"{data['Trafee Username']},{data['Telegram Username']},{data['Registration Date']}\n")
        logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ CSV.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëãüéÖüéÑWelcome aboard!\n\n"
        "Please enter your *Trafee username*‚ú®\n\n""So we can verify your access and get you started üöÄ",
        parse_mode="Markdown"
    )
    return ASK_TRAFFEE_USERNAME


# –ü—Ä–æ–≤–µ—Ä–∫–∞ username
def check_username(update: Update, context: CallbackContext):
    username = update.message.text.strip()
    telegram_username = update.message.from_user.username

    found, registered = is_user_in_list(username)

    if found and registered:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        update.message.reply_text(
            f"‚úÖ {username}, you're already registered!\n\n"
            f"Here's the link to [the main bot]({main_bot_link}) to continue your journey. üöÄ",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    elif found:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        mark_user_as_registered(username)
        log_registration(username, telegram_username)  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        update.message.reply_text(
            f"üéâ Congratulations, {username}!\n\nYou‚Äôve successfully registered.\n"
            f"Jump into [the main bot]({main_bot_link}) to start exploring! üåü",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        keyboard = [[InlineKeyboardButton("üîÑ Try Again", callback_data="retry")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "üòî Sorry, but your Trafee username isn‚Äôt in the list of authorized users.\n\n"
            "If you think this is a mistake, please contact your manager for assistance.‚òòÔ∏è",
            reply_markup=reply_markup
        )
        return ASK_TRAFFEE_USERNAME



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑"
def retry_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        "üöÄ No worries!\n\nPlease enter your *Trafee username* again, and let's try one more time.",
        parse_mode="Markdown"
    )
    return ASK_TRAFFEE_USERNAME

# Cancel registration
def cancel(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üö´ Registration has been canceled.\n\nIf you want to try again, just type /start.\n\n We'll be here waiting for you! üòä",
        parse_mode="Markdown"
    )
    return ConversationHandler.END


# –ö–æ–º–∞–Ω–¥–∞ /user_list –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
def send_user_list(update: Update, context: CallbackContext):
    if os.path.exists(allowed_users_file):
        update.message.reply_document(
            document=open(allowed_users_file, "rb"),
            filename="user_list.xlsx",
            caption="üìã Here's the current list of users."
        )
    else:
        update.message.reply_text("‚ùå The user list file is missing. Please check and try again.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_TRAFFEE_USERNAME: [
                MessageHandler(Filters.text & ~Filters.command, check_username),
                CallbackQueryHandler(retry_handler, pattern="^retry$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    dp.add_handler(conv_handler)

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    dp.add_handler(CommandHandler("user_list", send_user_list))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    logging.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.idle()

if __name__ == "__main__":
    logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
    main()
