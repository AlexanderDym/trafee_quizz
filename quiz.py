import logging
from datetime import datetime

# Telegram API
from telegram import Poll
from telegram.ext import CallbackContext

# OpenPyXL for working with Excel files
from openpyxl import load_workbook

# Custom modules
from excel_api import record_user_response
from winners import select_winners
from config import file_path, QUIZ_TIMEOUT_SECONDS  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

# Global variables (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç)
from shared import user_chat_mapping, poll_participants





def send_daily_quiz(context, day):
    logging.info(f"Preparing to send quiz for day {day + 1}")

    if day < len(quiz_questions):
        question = quiz_questions[day]

        if not user_chat_mapping:
            logging.warning("‚ö†Ô∏è No users registered for the quiz. Skipping.")
            return

        for username, user_data in user_chat_mapping.items():
            chat_id = user_data.get("chat_id")
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                logging.info(f"Sending quiz question to @{username} (Chat ID: {chat_id})")
                context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ö° Today's quiz question:"
                )
                add_quiz_question(context, question, chat_id, day)
            except Exception as e:
                logging.error(f"Failed to send quiz question to @{username} (Chat ID: {chat_id}): {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        next_day = (day + 1) % len(quiz_questions)
        context.dispatcher.bot_data['current_day'] = next_day
    else:
        logging.error(f"Day {day + 1} is out of range for questions.")

def add_quiz_question(context, quiz_question, chat_id, day):
    message = context.bot.send_poll(
        chat_id=chat_id,
        question=quiz_question.question,
        options=quiz_question.answers,
        type=Poll.QUIZ,
        correct_option_id=quiz_question.correct_answer_position,
        open_period=QUIZ_TIMEOUT_SECONDS,
        is_anonymous=False,
        explanation="Don't be sad"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞
    context.bot_data.update({message.poll.id: {'chat_id': message.chat.id, 'day': day}})
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç
    context.job_queue.run_once(
        handle_poll_timeout,
        when=QUIZ_TIMEOUT_SECONDS,
        context={'poll_id': message.poll.id, 'day': day}
    )

    
def handle_poll_timeout(context):
    poll_id = context.job.context['poll_id']
    day = context.job.context['day']

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    answered_users = poll_participants.get(poll_id, set())

    # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω
    wb = load_workbook(file_path)
    sheet_name = f"Day {day + 1}"
    sheet = wb[sheet_name]

    # –°–æ–∑–¥–∞—ë–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ Excel
    recorded_users = {row[0] for row in sheet.iter_rows(min_row=2, values_only=True) if isinstance(row[0], int)}

    for username, user_data in user_chat_mapping.items():
        chat_id = user_data.get("chat_id")  # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id
        user_id = chat_id  # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ chat_id ‚Äî —ç—Ç–æ user_id

        if user_id in answered_users or user_id in recorded_users:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            logging.info(f"User {username} has already answered the question. Timeout skipped.")
            continue

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            context.bot.send_message(chat_id=chat_id, text="‚è∞ Time's up!\n\nYour response was not counted ü•µ.")
            response_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            record_user_response(file_path, user_id=user_id, username=username, day=day, response_time=response_time, result=False)
        except Exception as e:
            logging.error(f"Failed to notify user {username} (Chat ID: {chat_id}): {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    select_winners(context, day)


# Class for quiz questions
class QuizQuestion:
    def __init__(self, question="", answers=None, correct_answer=""):
        self.question = question
        self.answers = answers if answers is not None else []
        self.correct_answer = correct_answer
        self.correct_answer_position = self.__get_correct_answer_position__()

    def __get_correct_answer_position__(self):
        for index, answer in enumerate(self.answers):
            if answer.strip().lower() == self.correct_answer.strip().lower():
                return index
        return -1

# Quiz questions for 7 days
quiz_questions = [
    QuizQuestion("What is an offer? üéÑüéÖ", ["A call-to-action on a landing page like Hurry up for gifts! üéÅ", "A product or service that the advertiser pays for", "Creative content used in advertising, like a holiday card from Santa ‚ùÑÔ∏è"], "A product or service that the advertiser pays for"),
    QuizQuestion("Which button is most commonly used for calls-to-action on Christmas's landing pages? üéÑüéÅ", ["Read more", "Share", "Buy now"], "Buy now"),
    QuizQuestion("Which social media became the favourite among affiliates during the holiday season thanks to short and dynamic videos? üé•‚ú®", ["Facebook", "TikTok", "Twitter"], "TikTok"),
    QuizQuestion("Which advertising strategy —Åan find the most magical ad for the upcoming holidays? üéÖüéÑ", ["Scaling", "A/B testing", "Retargeting"], "A/B testing"),
    QuizQuestion("What's the metric that measures your earnings per visitor? üéÖüí∞", ["EPC (Earnings Per Click)", "CTR (Click-Through Rate)", "CPA (Cost Per Action)"], "EPC (Earnings Per Click)"),
    QuizQuestion("What is ROI in affiliate marketing? üéÅüìà", ["Ad impressions", "Return on investment and campaign profitability", "Revenue per individual sale"], "Return on investment and campaign profitability"),
    QuizQuestion("What Does CPM Mean in Holiday Advertising? üéÖüìä", ["Cost Per Million (cost for one million clicks)", "Cost Per Millisecond (cost for one millisecond)", "Cost Per Mille (cost for one thousand impressions)"], "Cost Per Mille (cost for one thousand impressions)"),
]