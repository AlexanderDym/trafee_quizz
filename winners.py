import logging
import random
from openpyxl import load_workbook
from telegram.ext import CallbackContext

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∑–∞–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
from pathlib import Path
import os
from dotenv import load_dotenv
from config import file_path, gifts_file_path
from notifications import notify_users_about_next_day

# Load environment variables (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
load_dotenv(dotenv_path=Path('.') / 'trafee.env')



def select_winners(context, day):
    global notified_winners_global
    wb = load_workbook(file_path)
    sheet_name = f"Day {day + 1}"
    sheet = wb[sheet_name]

    correct_users = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if row[3] == "–í–µ—Ä–Ω–æ" and row[4] != "Winner":
            correct_users.append((row[0], row[1]))  # (user_id, username)

    if not correct_users:
        logging.info(f"No correct answers for Day {day + 1}. No winners selected.")
    else:
        # –í—ã–±–∏—Ä–∞–µ–º 5 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners = random.sample(correct_users, min(5, len(correct_users)))

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∞—Ä–∫–∏
        distribute_gifts(day + 1, winners, context)  # –ü–µ—Ä–µ–¥–∞–µ–º context –≤ distribute_gifts

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
        for winner in winners:
            user_id, username = winner
            #if user_id not in notified_winners_global:
                #try:
                    #context.bot.send_message(
                        #chat_id=user_id,
                        #text=f"üéâ Congratulations!\n\nYou are the winner of the day! üèÜ‚ú®"
                    #)
                    #logging.info(f"Winner notification sent to user ID: {user_id}")
                    #notified_winners_global.add(user_id)
                #except Exception as e:
                    #logging.error(f"Failed to send winner notification to user ID: {user_id}: {e}")

    wb.save(file_path)
    logging.info(f"Winners for Day {day + 1} have been recorded in the Excel sheet.")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    context.job_queue.run_once(
        notify_users_about_next_day,
        when=5,
        context={'day': day + 1}
    )
    logging.info(f"Reminder for next day scheduled in 5 seconds.")


def distribute_gifts(day, winners, context):
    """
    –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –º–µ–∂–¥—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã.

    :param day: –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (1-7).
    :param winners: –°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(user_id, username), ...].
    :param context: CallbackContext –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–∞—Ä–∫–æ–≤
    gifts_wb = load_workbook(gifts_file_path)
    gifts_sheet = gifts_wb[f"Day {day}"]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    users_wb = load_workbook(file_path)
    users_sheet = users_wb[f"Day {day}"]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    available_gifts = []
    for row in gifts_sheet.iter_rows(min_row=2, values_only=True):
        gift_name, quantity, remaining = row
        if remaining > 0:
            available_gifts.append((gift_name, remaining))

    if not available_gifts:
        logging.warning(f"No gifts available for Day {day}.")
        return

    for user_id, username in winners:
        if not available_gifts:
            logging.warning(f"All gifts for Day {day} have been distributed.")
            break

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
        selected_gift = random.choice(available_gifts)
        gift_name, remaining = selected_gift

        # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–¥–∞—Ä–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        for row in gifts_sheet.iter_rows(min_row=2):
            if row[0].value == gift_name:
                row[2].value -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                break

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        winner_found = False
        for row in users_sheet.iter_rows(min_row=2):
            if row[0].value == user_id:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                row[4].value = "Winner"  # –û—Ç–º–µ—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                row[5].value = gift_name  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
                winner_found = True
                break

        if not winner_found:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            users_sheet.append([user_id, username, None, None, "Winner", gift_name])

        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ç–∞–ª 0
        if remaining - 1 == 0:
            available_gifts = [g for g in available_gifts if g[0] != gift_name]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ Congratulations, {username}! You won: {gift_name} üéÅ"
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    gifts_wb.save(gifts_file_path)
    users_wb.save(file_path)

    logging.info(f"Gifts for Day {day} distributed and files updated.")
